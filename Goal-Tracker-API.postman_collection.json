{
	"info": {
		"_postman_id": "f59b7e16-e1c1-451c-aa14-7993d7b8ff99",
		"name": "Goal Tracker API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38662983"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Get API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Status code is 200\",()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate response status atribute\", ()=> {",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.exist;",
									"    pm.expect(response.status).to.eq(\"OPERATIONAL\");",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response and status code\", function () {",
									"    if(pm.response.code === 201){",
									"        pm.expect(pm.response.code).to.eql(201);",
									"    } else{",
									"        pm.expect(pm.response.code).to.eql(400);",
									"    }",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const responseJSON = pm.response.json();",
									"",
									"// Function to check if variables are defined and not empty",
									"function checkVariable(varName) {",
									"    pm.test(varName + \" variable is defined and not empty\", function () {",
									"        pm.expect(pm.collectionVariables.get(varName)).to.be.a('string').and.to.not.be.empty;",
									"    });",
									"}",
									"",
									"// Validate response structure",
									"pm.test(\"Response structure is valid\", function () {",
									"    pm.expect(responseJSON).to.have.property('user');",
									"    pm.expect(responseJSON.user).to.have.property('name');",
									"    pm.expect(responseJSON.user).to.have.property('email');",
									"});",
									"",
									"// Check if collection variables are set",
									"checkVariable('randomEmail');",
									"checkVariable('randomPassword');",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");",
									"let randomPassword = pm.variables.replaceIn(\"{{$randomPassword}}\");",
									"",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);",
									"pm.collectionVariables.set(\"randomPassword\", randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{randomEmail}}\",\n    \"password\": \"{{randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();",
									"pm.collectionVariables.set('token', responseBody.token);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.above(0, \"Token should not be empty\");",
									"});",
									"",
									"pm.test(\"Response has the expected schema\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('msg', 'token');",
									"    pm.expect(responseData.msg).to.be.a('string');",
									"    pm.expect(responseData.token).to.be.a('string');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{randomEmail}}\",\n    \"password\": \"{{randomPassword}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate response schema against expected structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.keys('name', 'email');",
									"    ",
									"    pm.expect(responseData.name).to.be.a('string');",
									"    pm.expect(responseData.email).to.be.a('string').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFullName}}\"\n    //\"email\": \"{{$randomEmail}}\",\n    //\"oldPassword\": \"Password5555\",\n    //\"newPassword\": \"Password1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/updateprofile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"updateprofile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Goals",
			"item": [
				{
					"name": "Create Goal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomGoalTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\");",
									"let randomGoalDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");",
									"",
									"pm.collectionVariables.set(\"randomGoalTitle\", randomGoalTitle);",
									"pm.collectionVariables.set(\"randomGoalDescription\", randomGoalDescription);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Title & Description properties within the response\", ()=>{",
									"    const response = pm.response.json().goal;",
									"    pm.expect(response.title).to.eq(pm.collectionVariables.get('randomGoalTitle'));",
									"    pm.expect(response.description).to.eq(pm.collectionVariables.get('randomGoalDescription'));",
									"});",
									"",
									"pm.test(\"Status code is 201\", ()=>{",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Status is a valid string value from the predefined set of statuses\", function () {",
									"    const responseData = pm.response.json();",
									"    const validStatuses = [\"to-do\", \"in-progress\", \"completed\", \"cancelled\"];",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.goal).to.exist.and.to.be.an('object');",
									"    pm.expect(validStatuses).to.include(responseData.goal.status);",
									"});",
									"",
									"pm.test(\"Priority is a valid string value from the predefined set of priorities\", function () {",
									"    const responseData = pm.response.json();",
									"    const validPriorities = [\"low\", \"medium\", \"high\"];",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.goal).to.exist.and.to.be.an('object');",
									"    pm.expect(validPriorities).to.include(responseData.goal.priority);",
									"});",
									"",
									"pm.test(\"Response matches the expected JSON schema for the goal object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('goal').that.is.an('object');",
									"",
									"    const goal = responseData.goal;",
									"    ",
									"    pm.expect(goal).to.have.all.keys('title', 'description', 'status', 'priority', 'createdBy', '_id', 'createdAt');",
									"    pm.expect(goal.title).to.be.a('string');",
									"    pm.expect(goal.description).to.be.a('string');",
									"    pm.expect(goal.status).to.be.a('string').that.is.oneOf([\"to-do\", \"in-progress\", \"completed\", \"cancelled\"]).and.to.equal(goal.status || 'to-do');",
									"    pm.expect(goal.priority).to.be.a('string').that.is.oneOf([\"low\", \"medium\", \"high\"]).and.to.equal(goal.priority || 'low'); ",
									"    pm.expect(goal.createdBy).to.be.a('string');",
									"    pm.expect(goal._id).to.be.a('string');",
									"    pm.expect(goal.createdAt).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{randomGoalTitle}}\",\n    \"description\": \"{{randomGoalDescription}}\",\n    \"priority\": \"high\",\n    \"status\": \"to-do\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/goals",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"goals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Goals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Filter and log titles and descriptions of all goals\", ()=>{ ",
									"    let isGoalInResponse = false;",
									"    response.goals.forEach((goal) =>{",
									"        if(goal.title.includes(pm.collectionVariables.get('randomGoalTitle')) && goal.description.includes(pm.collectionVariables.get('randomGoalDescription'))){",
									"            isGoalInResponse = true;",
									"        }",
									"    });",
									"    pm.expect(isGoalInResponse).to.be.true;",
									"});",
									"",
									"//Store all goal id's in an array",
									"const goalsIds = [];",
									"response.goals.forEach((goal)=>{",
									"    goalsIds.push(goal._id);",
									"});",
									"",
									"//Store all goal id's as a collection variable",
									"pm.collectionVariables.set(\"goalIds\", JSON.stringify(goalsIds));",
									"",
									"//Generate a random index to access a random goal id from the array",
									"const randomIndex = Math.floor(Math.random() * goalsIds.length);",
									"",
									"//Log a random goal id and store as a collection variable",
									"console.log(\"Random goal ID:\"+ goalsIds[randomIndex]);",
									"pm.collectionVariables.set(\"goalId\", goalsIds[randomIndex]);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/goals",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"goals"
							],
							"query": [
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response matches the expected schema for the goal object\", function () {",
									"    const responseData = pm.response.json().goal; ",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('_id', 'title', 'description', 'status', 'priority', 'createdBy', 'createdAt'); ",
									"    pm.expect(responseData._id).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.title).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.description).to.be.a('string');",
									"    pm.expect(responseData.status).to.be.oneOf(['to-do', 'in-progress', 'completed', 'cancelled']).and.to.satisfy(value => value === 'to-do' || value === 'in-progress' || value === 'completed' || value === 'cancelled'); ",
									"    pm.expect(responseData.priority).to.be.oneOf(['low', 'medium', 'high']).and.to.satisfy(value => value === 'low' || value === 'medium' || value === 'high'); ",
									"    pm.expect(new Date(responseData.createdAt)).to.be.a('date'); ",
									"});",
									"",
									"pm.test(\"Goal ID is a valid format\", function () {",
									"    const responseData = pm.response.json().goal; ",
									"    pm.expect(responseData).to.have.property('_id');",
									"    pm.expect(responseData._id).to.match(/^[a-f0-9]{24}$/, \"Goal ID must be a valid ObjectId format\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/goals/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"goals",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{goalId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response schema contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.goal).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.goal).to.have.all.keys('_id', 'title', 'description', 'status', 'priority', 'createdBy', 'createdAt');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{$randomWord}}\",\n    \"description\": \"{{$randomLoremSentences}}\",\n    \"status\": \"completed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/goals/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"goals",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{goalId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Goal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code and message validation\", function () {",
									"    const responseData = pm.response.json();",
									"    if (responseData.code === 200) {",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.msg).to.equal(\"Success! Goal removed.\");",
									"    } else if (responseData.code === 404) {",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.msg).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    }",
									"});",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/goals/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"goals",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{goalId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields: to-do, in-progress, completed, and cancelled\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.myProgress).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.myProgress).to.have.all.keys('to-do', 'in-progress', 'completed', 'cancelled');",
									"});",
									"",
									"pm.test(\"Validate the Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/goals/showprogress",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"goals",
								"showprogress"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://goal-tracker-api.onrender.com/api/v1",
			"type": "string"
		},
		{
			"key": "randomGoalTitle",
			"value": ""
		},
		{
			"key": "randomGoalDescription",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "goalIds",
			"value": ""
		},
		{
			"key": "goalId",
			"value": ""
		},
		{
			"key": "randomEmail",
			"value": ""
		},
		{
			"key": "randomPassword",
			"value": ""
		}
	]
}